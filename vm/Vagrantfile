# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Application consts:
  APP_PORT = 3000 # The port your app will run on inside the VM
  MONGO_URL = "mongodb://127.0.0.1:27017"  # MongoDB URL

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end


  # Configuring Rocky Linux instance using Oracle Virtualbox:
  config.vm.box = "bento/rockylinux-8" # Official rockylinux seem to return 404 from hashicorp hub
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "2048"  # Set the amount of memory for the VM
    vb.cpus = 2         # Set the number of CPUs for the VM
    vb.name = "DevOpsAssignmentRockyLinux"  # Name for the VM in VirtualBox
    vb.gui = true # Display the GUI just for debugging ! - Remove this line !
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  config.vm.network "forwarded_port", guest: APP_PORT, host: APP_PORT
  config.vm.network "forwarded_port", guest: 80, host: 8082
  config.vm.network "forwarded_port", guest: 443, host: 8083

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  # Consider to use public network using DHCP type: config.vm.network "private_network", type: "dhcp"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.

  
  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Configuring the application scripts dir as a volume into the vm
  config.vm.synced_folder "../app", "/app"
  #  Configuring Vagrant 
  
  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
 
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.

  # Installing the app dependencies using an external script:
  config.vm.provision "shell", inline: <<-SHELL
    # Get the VM's private IP address
    IP_ADDRESS=$(hostname -I | awk '{print $1}')
    
    # Add the entry to /etc/hosts
    echo "$IP_ADDRESS nice-assignment.local" | sudo tee -a /etc/hosts
  SHELL
  
  config.vm.provision "shell", path: "./requirements/install_packages.sh"
  # config.vm.provision "shell", path: "./run.sh"

  # =========================== RUN THE APPLICATION LOCALLY FROM THE VM IF NODEJS AND MONGO IS INSTALLED: ===========================
  # Set the MONGODB_URL environment variable and run the application
  # config.vm.provision "shell", inline: <<-SHELL
  #   echo "Setting MONGODB_URL environment variable"
  #   export MONGODB_URL=#{MONGO_URL}  # Set the MongoDB connection URL
  #   echo "Changing to /app directory"
  #   cd /app  # Navigate to the /app directory
  #   echo "Starting Node.js application"
  #   echo "DEBUG DEBUG MONGO_URL=${MONGODB_URL}"
  #   nohup node backend/index.js # Start the app in the background
  # SHELL

end
